# Ubuntu本番環境専用の環境変数設定（1GB RAM + 4GB Swap環境）
# このファイルを.env.production.ubuntuとしてコピーして使用してください

# ============================================
# Ollama最適化設定（超低メモリ環境用）
# ============================================

# 最軽量モデル設定（nomic-embed-text:v1.5 = 137MB）
OLLAMA_MODEL=nomic-embed-text:v1.5
OLLAMA_NUM_PARALLEL=1
OLLAMA_MAX_LOADED_MODELS=1
OLLAMA_KEEP_ALIVE=30s  # 30秒でアンロード（メモリ節約）
OLLAMA_NUM_THREADS=1  # シングルスレッド
OLLAMA_DEBUG=0
OLLAMA_MONITOR=1  # メモリ監視を有効化
OLLAMA_NOPREALLOCATE=1  # メモリ事前割り当て無効
OLLAMA_FLASH_ATTENTION=0  # Flash Attention無効

# CrewAI Embeddings設定（最軽量モデル）
EMBEDDER_PROVIDER=ollama
EMBEDDER_MODEL=nomic-embed-text:v1.5
CREWAI__EMBEDDINGS__PROVIDER=ollama
CREWAI__EMBEDDINGS__MODEL=nomic-embed-text:v1.5

# ============================================
# タイムアウト設定（スワップ使用を考慮して大幅延長）
# ============================================

# API・リクエストタイムアウト
REQUEST_TIMEOUT=1800  # 30分（スワップ使用時の遅延を考慮）
TASK_TIMEOUT=3600    # 60分

# CrewAI内部タイムアウト
CREWAI_TIMEOUT=1800  # 30分
CREWAI_MAX_RETRIES=10  # リトライ回数を増加

# Embeddings生成のタイムアウト
EMBEDDINGS_TIMEOUT=900  # 15分（初回は特に遅い）
EMBEDDINGS_RETRY_COUNT=5
EMBEDDINGS_RETRY_DELAY=30  # リトライ間隔も延長

# ============================================
# パフォーマンス調整（超低メモリ環境）
# ============================================

# ワーカー数を最小限に
MAX_WORKERS=1  # シングルワーカー
UVICORN_WORKERS=1

# バッチサイズを最小化
BATCH_SIZE=1  # バッチ処理を無効化
EMBEDDING_BATCH_SIZE=1  # 一度に1つずつ処理

# ============================================
# メモリ管理設定
# ============================================

# ガベージコレクション頻度を上げる
PYTHONMALLOC=malloc
PYTHONGC=1

# メモリプロファイリング（デバッグ時のみ）
# MEMORY_PROFILING=true

# ============================================
# システムリソース設定
# ============================================

# Dockerコンテナのリソース制限を考慮
DOCKER_MEMORY_LIMIT=8G
DOCKER_CPU_LIMIT=2

# スワップ使用の許可
ALLOW_SWAP=true

# ============================================
# エラーハンドリング
# ============================================

# エラー時の自動リトライ
AUTO_RETRY_ON_ERROR=true
MAX_ERROR_RETRIES=3

# エラーログの詳細度
ERROR_LOG_LEVEL=DEBUG

# ============================================
# ヘルスチェック設定
# ============================================

# ヘルスチェックの頻度を下げる（リソース節約）
HEALTH_CHECK_INTERVAL=60
HEALTH_CHECK_TIMEOUT=30

# ============================================
# 最適化フラグ
# ============================================

# Python最適化
PYTHONOPTIMIZE=1

# FastAPIの本番モード
PRODUCTION=true

# デバッグ出力を無効化（パフォーマンス向上）
DEBUG=false
VERBOSE=false