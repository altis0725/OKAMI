services:
  # Main OKAMI service
  okami:
    build: .
    container_name: okami-main
    ports:
      - "8000:8000"
    volumes:
      - ./:/app
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./knowledge:/app/knowledge
    environment:
      - PYTHONUNBUFFERED=1
      - CREWAI_STORAGE_DIR=/app/storage
      - CREWAI_DISABLE_TELEMETRY=true
      - OTEL_SDK_DISABLED=true
      - LOG_LEVEL=INFO
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_BASE_URL=http://ollama:11434
      - EMBEDDER_PROVIDER=ollama
      - EMBEDDER_MODEL=mxbai-embed-large
      # QDRANT_HOST=qdrant
      # QDRANT_PORT=6333
      # QDRANT_GRPC_PORT=6334
      - VECTOR_STORE_TYPE=chroma
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_PERSIST_DIRECTORY=/app/storage/chroma
      - USE_QDRANT=false
      # CrewAI内部メモリ用のChroma設定
      - CHROMA_SERVER_HOST=chromadb
      - CHROMA_SERVER_HTTP_PORT=8000
      # CrewAI知識ベース用の設定
      - CREWAI__EMBEDDINGS__PROVIDER=ollama
      - CREWAI__EMBEDDINGS__MODEL=mxbai-embed-large
      - CREWAI__EMBEDDINGS__BASE_URL=http://ollama:11434
    env_file:
      - .env
    networks:
      - okami-network
    depends_on:
      - chromadb
      - ollama
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Claude Code Quality Monitor service
  claude-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: okami-quality-monitor
    volumes:
      - ./monitoring:/app/monitoring
      - ./logs:/app/logs
    environment:
      - OKAMI_API_URL=http://okami:8000
      - QUALITY_CHECK_INTERVAL=30
      - LOG_LEVEL=INFO
    env_file:
      - .env
    depends_on:
      okami:
        condition: service_healthy
    networks:
      - okami-network
    restart: unless-stopped

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: okami-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
    networks:
      - okami-network
    restart: unless-stopped

  # Qdrant for vector storage（無効化）
  # qdrant:
  #   image: qdrant/qdrant:latest
  #   container_name: okami-qdrant
  #   ports:
  #     - "6333:6333"
  #     - "6334:6334"  # gRPC port
  #   volumes:
  #     - qdrant-data:/qdrant/storage
  #   environment:
  #     - QDRANT__SERVICE__GRPC_PORT=6334
  #     - QDRANT__SERVICE__HTTP_PORT=6333
  #     - QDRANT__LOG_LEVEL=INFO
  #   networks:
  #     - okami-network
  #   restart: unless-stopped
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #     start_period: 30s

  # Ollama for local embeddings - Docker環境に組み込み
  ollama:
    image: ollama/ollama:latest
    container_name: okami-ollama
    ports:
      - "11434:11434"
    volumes:
      - ollama-data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - okami-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 120s

  # Ollama初期化サービス
  ollama-init:
    image: curlimages/curl:latest
    container_name: okami-ollama-init
    command: ["sh", "-c", "sleep 30 && /scripts/init_ollama.sh"]
    volumes:
      - ./scripts/init_ollama.sh:/scripts/init_ollama.sh:ro
    environment:
      - DOWNLOAD_JAPANESE_MODEL=false
    depends_on:
      ollama:
        condition: service_healthy
    networks:
      - okami-network
    restart: "no"

volumes:
  chroma-data:
  ollama-data:
  # qdrant-data:

networks:
  okami-network:
    driver: bridge