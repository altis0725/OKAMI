services:
  # Main OKAMI service
  okami:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: okami-main
    ports:
      - "${SERVER_PORT:-8000}:8000"
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./knowledge:/app/knowledge
    environment:
      - PYTHONUNBUFFERED=1
      - CREWAI_STORAGE_DIR=/app/storage
      - CHROMA_PERSIST_DIRECTORY=/app/storage/chroma
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PRODUCTION=true
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
    env_file:
      - .env
    networks:
      - okami-network
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # Claude Code Quality Monitor service
  claude-monitor:
    build:
      context: .
      dockerfile: Dockerfile.monitor
    container_name: okami-quality-monitor
    volumes:
      - ./monitoring:/app/monitoring
      - ./logs:/app/logs
    environment:
      - OKAMI_API_URL=http://okami:8000
      - QUALITY_CHECK_INTERVAL=${QUALITY_CHECK_INTERVAL:-30}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PRODUCTION=true
    env_file:
      - .env
    depends_on:
      okami:
        condition: service_healthy
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 1G

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: okami-chromadb
    ports:
      - "8001:8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
      - CHROMA_AUTH_PROVIDER=chromadb.auth.token.TokenAuthServerProvider
      - CHROMA_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-okami-secret-token}
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: okami-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - okami
    networks:
      - okami-network
    restart: always

  # Log aggregator
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    container_name: okami-logstash
    volumes:
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    environment:
      - LS_JAVA_OPTS=-Xmx512m -Xms512m
    networks:
      - okami-network
    restart: always

volumes:
  chroma-data:
    driver: local

networks:
  okami-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16