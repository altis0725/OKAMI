services:
  # Main OKAMI service
  okami:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: okami-main
    expose:
      - "8000"
    volumes:
      - ./storage:/app/storage
      - ./logs:/app/logs
      - ./knowledge:/app/knowledge
      - ./evolution:/app/evolution
      - ./config:/app/config
      - ./crews:/app/crews
      - ./tools:/app/tools
      - ./core:/app/core
      - ./guardrails:/app/guardrails
      - ./utils:/app/utils
    environment:
      # Python設定
      - PYTHONUNBUFFERED=1
      
      # CrewAI設定
      - CREWAI_STORAGE_DIR=/app/storage
      - CREWAI_DISABLE_TELEMETRY=true
      - OTEL_SDK_DISABLED=true
      
      # サーバー設定
      - SERVER_HOST=0.0.0.0
      - SERVER_PORT=8000
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - PRODUCTION=true
      - ALLOWED_HOSTS=traning.work,localhost
      
      # ベクトルストア設定
      - VECTOR_STORE_TYPE=chroma
      - CHROMA_HOST=chromadb
      - CHROMA_PORT=8000
      - CHROMA_PERSIST_DIRECTORY=/app/storage/chroma
      - CHROMA_AUTH_TOKEN=${CHROMA_AUTH_TOKEN:-okami-secret-token}
      
      # CrewAI内部メモリ用のChroma設定
      - CHROMA_SERVER_HOST=chromadb
      - CHROMA_SERVER_HTTP_PORT=8000
      
      # Embeddings設定（本番環境でもOllamaを使用可能）
      - EMBEDDER_PROVIDER=${EMBEDDER_PROVIDER:-ollama}
      - EMBEDDER_MODEL=${EMBEDDER_MODEL:-mxbai-embed-large}
      
      # CrewAI知識ベース用の設定
      - CREWAI__EMBEDDINGS__PROVIDER=${EMBEDDER_PROVIDER:-ollama}
      - CREWAI__EMBEDDINGS__MODEL=${EMBEDDER_MODEL:-mxbai-embed-large}
      - CREWAI__EMBEDDINGS__BASE_URL=http://ollama:11434
      
      # Ollama設定（Docker内部で動作）
      - OLLAMA_HOST=http://ollama:11434
      - OLLAMA_BASE_URL=http://ollama:11434
      - OLLAMA_MODEL=${OLLAMA_MODEL:-mxbai-embed-large}
      
      # MCP Gateway設定（オプション）
      - MCP_GATEWAY_URL=${MCP_GATEWAY_URL:-}
      - MCP_ENABLED=${MCP_ENABLED:-false}
      
      # メモリ設定
      - MEMORY_PROVIDER=${MEMORY_PROVIDER:-basic}
      - MEMORY_DB_PATH=/app/storage/memory.db
      
      # パフォーマンス設定
      - MAX_WORKERS=${MAX_WORKERS:-4}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}
      - TASK_TIMEOUT=${TASK_TIMEOUT:-600}
    env_file:
      - .env.production
    networks:
      - okami-network
    depends_on:
      - chromadb
      - ollama
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 4G
        reservations:
          cpus: '1'
          memory: 2G

  # ChromaDB for vector storage
  chromadb:
    image: chromadb/chroma:latest
    container_name: okami-chromadb
    expose:
      - "8000"
    volumes:
      - chroma-data:/chroma/chroma
    environment:
      - IS_PERSISTENT=TRUE
      - ANONYMIZED_TELEMETRY=FALSE
#      - CHROMA_AUTH_PROVIDER=${CHROMA_AUTH_PROVIDER:-chromadb.auth.token.TokenAuthServerProvider}
#      - CHROMA_AUTH_CREDENTIALS=${CHROMA_AUTH_TOKEN:-okami-secret-token}
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 2G
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: okami-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.prod.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/certbot/www:/var/www/certbot:ro
      - ./nginx/certbot/conf:/etc/letsencrypt:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
    depends_on:
      - okami
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Certbot for SSL certificate management
  certbot:
    image: certbot/certbot:latest
    container_name: okami-certbot
    volumes:
      - ./nginx/certbot/www:/var/www/certbot:rw
      - ./nginx/certbot/conf:/etc/letsencrypt:rw
    networks:
      - okami-network
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"

  # Ollama for local embeddings - Ubuntu最適化版
  ollama:
    image: ollama/ollama:latest
    container_name: okami-ollama
    expose:
      - "11434"
    volumes:
      - ollama-data:/root/.ollama
      - ./scripts/ollama-entrypoint-ubuntu.sh:/entrypoint.sh:ro
    environment:
      - OLLAMA_HOST=0.0.0.0
      - OLLAMA_NUM_PARALLEL=1  # バッチ処理を無効化（エラー回避）
      - OLLAMA_MAX_LOADED_MODELS=1  # エンベディングモデル1つに制限
      - OLLAMA_KEEP_ALIVE=10m  # モデルをメモリに長く保持
      - OLLAMA_MODELS=/root/.ollama/models  # モデルパスを明示
      - OLLAMA_DEBUG=${OLLAMA_DEBUG:-0}  # デバッグログ（環境変数で制御）
      # CPU最適化設定
      - OLLAMA_NUM_THREADS=4  # CPUスレッド数を制限
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 8G  # メモリを増加
        reservations:
          cpus: '1'
          memory: 4G  # 最小メモリも増加
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/tags"]
      interval: 60s  # インターバルを長く
      timeout: 30s  # タイムアウトを長く
      retries: 10  # リトライ回数を増やす
      start_period: 900s  # 起動期間を15分に延長
    entrypoint: ["/bin/bash", "/entrypoint.sh"]

  # Optional: Monitoring with Prometheus Node Exporter
  node-exporter:
    image: prom/node-exporter:latest
    container_name: okami-node-exporter
    expose:
      - "9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    networks:
      - okami-network
    restart: always
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 128M

volumes:
  chroma-data:
    driver: local
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  ollama-data:
    driver: local

networks:
  okami-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16